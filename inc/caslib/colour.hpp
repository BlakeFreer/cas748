// From Paul Tol's notes on colour maps.
// https://personal.sron.nl/~pault/

#include <cmath>
#include <cstdint>
#include <vector>

namespace cas {

class Colour {
public:
    uint8_t red;
    uint8_t green;
    uint8_t blue;

    static Colour Interpolate(const Colour& c1, const Colour& c2, float t);
    bool operator==(const Colour& other) const;
    bool operator!=(const Colour& other) const;
};

typedef std::vector<Colour> DiscreteColourMap;
typedef std::vector<Colour> ColourSet;

class ContinuousColourMap {
public:
    ContinuousColourMap(std::initializer_list<Colour> colours);

    Colour Get(float t) const;
    void Rescale(float minimum, float maximum);

private:
    std::vector<Colour> colours_;
    float mini_;
    float maxi_;
};

namespace colour {

const DiscreteColourMap sunset_discrete{
    Colour(0x36, 0x4B, 0x9A), Colour(0x4A, 0x7B, 0xB7),
    Colour(0x6E, 0xA6, 0xCD), Colour(0x98, 0xCA, 0xE1),
    Colour(0xC2, 0xE4, 0xEF), Colour(0xEA, 0xEC, 0xCC),
    Colour(0xFE, 0xDA, 0x8B), Colour(0xFD, 0xB3, 0x66),
    Colour(0xF6, 0x7E, 0x4B), Colour(0xDD, 0x3D, 0x2D),
    Colour(0xA5, 0x00, 0x26)};

const ContinuousColourMap sunset{
    Colour(0x36, 0x4B, 0x9A), Colour(0x4A, 0x7B, 0xB7),
    Colour(0x6E, 0xA6, 0xCD), Colour(0x98, 0xCA, 0xE1),
    Colour(0xC2, 0xE4, 0xEF), Colour(0xEA, 0xEC, 0xCC),
    Colour(0xFE, 0xDA, 0x8B), Colour(0xFD, 0xB3, 0x66),
    Colour(0xF6, 0x7E, 0x4B), Colour(0xDD, 0x3D, 0x2D),
    Colour(0xA5, 0x00, 0x26)};

const DiscreteColourMap nightfall_discrete{
    Colour(0x12, 0x5A, 0x56), Colour(0x23, 0x8F, 0x9D),
    Colour(0x60, 0xBC, 0xE9), Colour(0xC6, 0xDB, 0xED),
    Colour(0xEC, 0xEA, 0xDA), Colour(0xF9, 0xD5, 0x76),
    Colour(0xFD, 0x9A, 0x44), Colour(0xE9, 0x4C, 0x1F),
    Colour(0xA0, 0x18, 0x13)};

const ContinuousColourMap nightfall{
    Colour(0x12, 0x5A, 0x56), Colour(0x00, 0x76, 0x7B),
    Colour(0x23, 0x8F, 0x9D), Colour(0x42, 0xA7, 0xC6),
    Colour(0x60, 0xBC, 0xE9), Colour(0x9D, 0xCC, 0xEF),
    Colour(0xC6, 0xDB, 0xED), Colour(0xDE, 0xE6, 0xE7),
    Colour(0xEC, 0xEA, 0xDA), Colour(0xF0, 0xE6, 0xB2),
    Colour(0xF9, 0xD5, 0x76), Colour(0xFF, 0xB9, 0x54),
    Colour(0xFD, 0x9A, 0x44), Colour(0xF5, 0x76, 0x34),
    Colour(0xE9, 0x4C, 0x1F), Colour(0xD1, 0x18, 0x07),
    Colour(0xA0, 0x18, 0x13)};

const DiscreteColourMap BuRd_discrete{
    Colour(0x21, 0x66, 0xAC), Colour(0x43, 0x93, 0xC3),
    Colour(0x92, 0xC5, 0xDE), Colour(0xD1, 0xE5, 0xF0),
    Colour(0xF7, 0xF7, 0xF7), Colour(0xFD, 0xDB, 0xC7),
    Colour(0xF4, 0xA5, 0x82), Colour(0xD6, 0x60, 0x4D),
    Colour(0xB2, 0x18, 0x2B)};

const ContinuousColourMap BuRd{
    Colour(0x21, 0x66, 0xAC), Colour(0x43, 0x93, 0xC3),
    Colour(0x92, 0xC5, 0xDE), Colour(0xD1, 0xE5, 0xF0),
    Colour(0xF7, 0xF7, 0xF7), Colour(0xFD, 0xDB, 0xC7),
    Colour(0xF4, 0xA5, 0x82), Colour(0xD6, 0x60, 0x4D),
    Colour(0xB2, 0x18, 0x2B)};

const DiscreteColourMap PRGn_discrete{
    Colour(0x76, 0x2A, 0x83), Colour(0x99, 0x70, 0xAB),
    Colour(0xC2, 0xA5, 0xCF), Colour(0xE7, 0xD4, 0xE8),
    Colour(0xF7, 0xF7, 0xF7), Colour(0xD9, 0xF0, 0xD3),
    Colour(0xAC, 0xD3, 0x9E), Colour(0x5A, 0xAE, 0x61),
    Colour(0x1B, 0x78, 0x37)};

const ContinuousColourMap PRGn{
    Colour(0x76, 0x2A, 0x83), Colour(0x99, 0x70, 0xAB),
    Colour(0xC2, 0xA5, 0xCF), Colour(0xE7, 0xD4, 0xE8),
    Colour(0xF7, 0xF7, 0xF7), Colour(0xD9, 0xF0, 0xD3),
    Colour(0xAC, 0xD3, 0x9E), Colour(0x5A, 0xAE, 0x61),
    Colour(0x1B, 0x78, 0x37)};

const DiscreteColourMap YlOrBr_discrete{
    Colour(0xFF, 0xFF, 0xE5), Colour(0xFF, 0xF7, 0xBC),
    Colour(0xFE, 0xE3, 0x91), Colour(0xFE, 0xC4, 0x4F),
    Colour(0xFB, 0x9A, 0x29), Colour(0xEC, 0x70, 0x14),
    Colour(0xCC, 0x4C, 0x02), Colour(0x99, 0x34, 0x04),
    Colour(0x66, 0x25, 0x06),
};

const ContinuousColourMap YlOrBr{
    Colour(0xFF, 0xFF, 0xE5), Colour(0xFF, 0xF7, 0xBC),
    Colour(0xFE, 0xE3, 0x91), Colour(0xFE, 0xC4, 0x4F),
    Colour(0xFB, 0x9A, 0x29), Colour(0xEC, 0x70, 0x14),
    Colour(0xCC, 0x4C, 0x02), Colour(0x99, 0x34, 0x04),
    Colour(0x66, 0x25, 0x06)};

const ContinuousColourMap WhOrBr{
    Colour(0xFF, 0xFF, 0xFF), Colour(0xFF, 0xF7, 0xBC),
    Colour(0xFE, 0xE3, 0x91), Colour(0xFE, 0xC4, 0x4F),
    Colour(0xFB, 0x9A, 0x29), Colour(0xEC, 0x70, 0x14),
    Colour(0xCC, 0x4C, 0x02), Colour(0x99, 0x34, 0x04),
    Colour(0x66, 0x25, 0x06)};

const ContinuousColourMap iridescent{
    Colour(0xFE, 0xFB, 0xE9), Colour(0xFC, 0xF7, 0xD5),
    Colour(0xF5, 0xF3, 0xC1), Colour(0xEA, 0xF0, 0xB5),
    Colour(0xDD, 0xEC, 0xBF), Colour(0xD0, 0xE7, 0xCA),
    Colour(0xC2, 0xE3, 0xD2), Colour(0xB5, 0xDD, 0xD8),
    Colour(0xA8, 0xD8, 0xDC), Colour(0x9B, 0xD2, 0xE1),
    Colour(0x8D, 0xCB, 0xE4), Colour(0x81, 0xC4, 0xE7),
    Colour(0x7B, 0xBC, 0xE7), Colour(0x7E, 0xB2, 0xE4),
    Colour(0x88, 0xA5, 0xDD), Colour(0x93, 0x98, 0xD2),
    Colour(0x9B, 0x8A, 0xC4), Colour(0x9D, 0x7D, 0xB2),
    Colour(0x9A, 0x70, 0x9E), Colour(0x90, 0x63, 0x88),
    Colour(0x80, 0x57, 0x70), Colour(0x68, 0x49, 0x57),
    Colour(0x46, 0x35, 0x3A)};

const ContinuousColourMap rainbow_PuRd{
    Colour(0x6F, 0x4C, 0x9B), Colour(0x60, 0x59, 0xA9),
    Colour(0x55, 0x68, 0xB8), Colour(0x4E, 0x79, 0xC5),
    Colour(0x4D, 0x8A, 0xC6), Colour(0x4E, 0x96, 0xBC),
    Colour(0x54, 0x9E, 0xB3), Colour(0x59, 0xA5, 0xA9),
    Colour(0x60, 0xAB, 0x9E), Colour(0x69, 0xB1, 0x90),
    Colour(0x77, 0xB7, 0x7D), Colour(0x8C, 0xBC, 0x68),
    Colour(0xA6, 0xBE, 0x54), Colour(0xBE, 0xBC, 0x48),
    Colour(0xD1, 0xB5, 0x41), Colour(0xDD, 0xAA, 0x3C),
    Colour(0xE4, 0x9C, 0x39), Colour(0xE7, 0x8C, 0x35),
    Colour(0xE6, 0x79, 0x32), Colour(0xE4, 0x63, 0x2D),
    Colour(0xDF, 0x48, 0x28), Colour(0xDA, 0x22, 0x22)};

const ContinuousColourMap rainbow_PuBr{
    Colour(0x6F, 0x4C, 0x9B), Colour(0x60, 0x59, 0xA9),
    Colour(0x55, 0x68, 0xB8), Colour(0x4E, 0x79, 0xC5),
    Colour(0x4D, 0x8A, 0xC6), Colour(0x4E, 0x96, 0xBC),
    Colour(0x54, 0x9E, 0xB3), Colour(0x59, 0xA5, 0xA9),
    Colour(0x60, 0xAB, 0x9E), Colour(0x69, 0xB1, 0x90),
    Colour(0x77, 0xB7, 0x7D), Colour(0x8C, 0xBC, 0x68),
    Colour(0xA6, 0xBE, 0x54), Colour(0xBE, 0xBC, 0x48),
    Colour(0xD1, 0xB5, 0x41), Colour(0xDD, 0xAA, 0x3C),
    Colour(0xE4, 0x9C, 0x39), Colour(0xE7, 0x8C, 0x35),
    Colour(0xE6, 0x79, 0x32), Colour(0xE4, 0x63, 0x2D),
    Colour(0xDF, 0x48, 0x28), Colour(0xDA, 0x22, 0x22),
    Colour(0xB8, 0x22, 0x1E), Colour(0x95, 0x21, 0x1B),
    Colour(0x72, 0x1E, 0x17), Colour(0x52, 0x1A, 0x13)};

const ContinuousColourMap rainbow_WhRd{
    Colour(0xE8, 0xEC, 0xFB), Colour(0xDD, 0xD8, 0xEF),
    Colour(0xD1, 0xC1, 0xE1), Colour(0xC3, 0xA8, 0xD1),
    Colour(0xB5, 0x8F, 0xC2), Colour(0xA7, 0x78, 0xB4),
    Colour(0x9B, 0x62, 0xA7), Colour(0x8C, 0x4E, 0x99),
    Colour(0x6F, 0x4C, 0x9B), Colour(0x60, 0x59, 0xA9),
    Colour(0x55, 0x68, 0xB8), Colour(0x4E, 0x79, 0xC5),
    Colour(0x4D, 0x8A, 0xC6), Colour(0x4E, 0x96, 0xBC),
    Colour(0x54, 0x9E, 0xB3), Colour(0x59, 0xA5, 0xA9),
    Colour(0x60, 0xAB, 0x9E), Colour(0x69, 0xB1, 0x90),
    Colour(0x77, 0xB7, 0x7D), Colour(0x8C, 0xBC, 0x68),
    Colour(0xA6, 0xBE, 0x54), Colour(0xBE, 0xBC, 0x48),
    Colour(0xD1, 0xB5, 0x41), Colour(0xDD, 0xAA, 0x3C),
    Colour(0xE4, 0x9C, 0x39), Colour(0xE7, 0x8C, 0x35),
    Colour(0xE6, 0x79, 0x32), Colour(0xE4, 0x63, 0x2D),
    Colour(0xDF, 0x48, 0x28), Colour(0xDA, 0x22, 0x22)};

const ContinuousColourMap rainbow_WhBr{
    Colour(0xE8, 0xEC, 0xFB), Colour(0xDD, 0xD8, 0xEF),
    Colour(0xD1, 0xC1, 0xE1), Colour(0xC3, 0xA8, 0xD1),
    Colour(0xB5, 0x8F, 0xC2), Colour(0xA7, 0x78, 0xB4),
    Colour(0x9B, 0x62, 0xA7), Colour(0x8C, 0x4E, 0x99),
    Colour(0x6F, 0x4C, 0x9B), Colour(0x60, 0x59, 0xA9),
    Colour(0x55, 0x68, 0xB8), Colour(0x4E, 0x79, 0xC5),
    Colour(0x4D, 0x8A, 0xC6), Colour(0x4E, 0x96, 0xBC),
    Colour(0x54, 0x9E, 0xB3), Colour(0x59, 0xA5, 0xA9),
    Colour(0x60, 0xAB, 0x9E), Colour(0x69, 0xB1, 0x90),
    Colour(0x77, 0xB7, 0x7D), Colour(0x8C, 0xBC, 0x68),
    Colour(0xA6, 0xBE, 0x54), Colour(0xBE, 0xBC, 0x48),
    Colour(0xD1, 0xB5, 0x41), Colour(0xDD, 0xAA, 0x3C),
    Colour(0xE4, 0x9C, 0x39), Colour(0xE7, 0x8C, 0x35),
    Colour(0xE6, 0x79, 0x32), Colour(0xE4, 0x63, 0x2D),
    Colour(0xDF, 0x48, 0x28), Colour(0xDA, 0x22, 0x22),
    Colour(0xB8, 0x22, 0x1E), Colour(0x95, 0x21, 0x1B),
    Colour(0x72, 0x1E, 0x17), Colour(0x52, 0x1A, 0x13)};

const DiscreteColourMap rainbow_discrete{
    Colour(0xE8, 0xEC, 0xFB), Colour(0xD9, 0xCC, 0xE3),
    Colour(0xD1, 0xBB, 0xD7), Colour(0xCA, 0xAC, 0xCB),
    Colour(0xBA, 0x8D, 0xB4), Colour(0xAE, 0x76, 0xA3),
    Colour(0xAA, 0x6F, 0x9E), Colour(0x99, 0x4F, 0x88),
    Colour(0x88, 0x2E, 0x72), Colour(0x19, 0x65, 0xB0),
    Colour(0x43, 0x7D, 0xBF), Colour(0x52, 0x89, 0xC7),
    Colour(0x61, 0x95, 0xCF), Colour(0x7B, 0xAF, 0xDE),
    Colour(0x4E, 0xB2, 0x65), Colour(0x90, 0xC9, 0x87),
    Colour(0xCA, 0xE0, 0xAB), Colour(0xF7, 0xF0, 0x56),
    Colour(0xF7, 0xCB, 0x45), Colour(0xF6, 0xC1, 0x41),
    Colour(0xF4, 0xA7, 0x36), Colour(0xF1, 0x93, 0x2D),
    Colour(0xEE, 0x80, 0x26), Colour(0xE8, 0x60, 0x1C),
    Colour(0xE6, 0x55, 0x18), Colour(0xDC, 0x05, 0x0C),
    Colour(0xA5, 0x17, 0x0E), Colour(0x72, 0x19, 0x0E),
    Colour(0x42, 0x15, 0x0A)};

const ColourSet bright{
    Colour(0x44, 0x77, 0xAA), Colour(0xEE, 0x66, 0x77),
    Colour(0x22, 0x88, 0x33), Colour(0xCC, 0xBB, 0x44),
    Colour(0x66, 0xCC, 0xEE), Colour(0xAA, 0x33, 0x77),
    Colour(0xBB, 0xBB, 0xBB), Colour(0x00, 0x00, 0x00),
};

const ColourSet high{
    Colour(0x00, 0x44, 0x88),
    Colour(0xDD, 0xAA, 0x33),
    Colour(0xBB, 0x55, 0x66),
    Colour(0x00, 0x00, 0x00),
};

const ColourSet vibrant{
    Colour(0xEE, 0x77, 0x33), Colour(0x00, 0x77, 0xBB),
    Colour(0x33, 0xBB, 0xEE), Colour(0xEE, 0x33, 0x77),
    Colour(0xCC, 0x33, 0x11), Colour(0x00, 0x99, 0x88),
    Colour(0xBB, 0xBB, 0xBB), Colour(0x00, 0x00, 0x00),
};

const ColourSet muted{
    Colour(0xCC, 0x66, 0x77), Colour(0x33, 0x22, 0x88),
    Colour(0xDD, 0xCC, 0x77), Colour(0x11, 0x77, 0x33),
    Colour(0x88, 0xCC, 0xEE), Colour(0x88, 0x22, 0x55),
    Colour(0x44, 0xAA, 0x99), Colour(0x99, 0x99, 0x33),
    Colour(0xAA, 0x44, 0x99), Colour(0xDD, 0xDD, 0xDD),
    Colour(0x00, 0x00, 0x00),
};

const ColourSet medium{
    Colour(0x66, 0x99, 0xCC), Colour(0x00, 0x44, 0x88),
    Colour(0xEE, 0xCC, 0x66), Colour(0x99, 0x44, 0x55),
    Colour(0x99, 0x77, 0x00), Colour(0xEE, 0x99, 0xAA),
    Colour(0x00, 0x00, 0x00),
};
const ColourSet light{
    Colour(0x77, 0xAA, 0xDD), Colour(0xEE, 0x88, 0x66),
    Colour(0xEE, 0xDD, 0x88), Colour(0xFF, 0xAA, 0xBB),
    Colour(0x99, 0xDD, 0xFF), Colour(0x44, 0xBB, 0x99),
    Colour(0xBB, 0xCC, 0x33), Colour(0xAA, 0xAA, 0x00),
    Colour(0xDD, 0xDD, 0xDD), Colour(0x00, 0x00, 0x00),
};

}  // namespace colour

}  // namespace cas